package com.rajan.controller;

import com.amazonaws.services.iot.client.AWSIotException;
import com.amazonaws.services.iot.model.CreateJobRequest;
import com.amazonaws.services.iot.model.JobExecutionsRolloutConfig;
import com.amazonaws.services.iot.model.ListThingsRequest;
import com.amazonaws.services.iot.model.TimeoutConfig;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.rajan.utils.AwsBuilderUtils;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.util.Callback;

/**
 * 
 * @author rajan
 *
 */
public class CreateJobController {
	@FXML
	private TextField jobName;

	@FXML
	private TextArea jobDescription;

	@FXML
	private ListView<String> thingListView;

	@FXML
	private ListView<String> bucketListView;

	@FXML
	private ListView<S3ObjectSummary> objectKeyListView;

	@FXML
	private TextField jobTimeout;

	@FXML
	private TextField maxJobRollout;

	@FXML
	private Button createJobBtn;

	@FXML
	private void initialize() throws AWSIotException {
//		thingListView.getItems().addAll(AwsBuilderUtils.getInstance().listThing(new ListThingsRequest()));
		thingListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
		bucketListView.getItems().addAll(AwsBuilderUtils.getInstance().listS3Buckets());
		bucketListView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
			public void changed(ObservableValue<? extends String> ov, final String oldvalue, final String newvalue) {
				loadObjectAsPerBucket(newvalue);
			}
		});
		objectKeyListView.setCellFactory(new S3ObjectCellFactory());
		

	}

	protected void loadObjectAsPerBucket(String bucket_name) {
		objectKeyListView.getItems().clear();
		objectKeyListView.getItems().addAll(AwsBuilderUtils.getInstance().listS3ObjectsKeyFromBucket(bucket_name));
	}

	@FXML
	private void createJob(ActionEvent event) {
		CreateJobRequest createJobRequest=new CreateJobRequest();
		createJobRequest.setJobId(jobName.getText());
		createJobRequest.setDescription(jobDescription.getText());
		createJobRequest.setTargets(thingListView.getSelectionModel().getSelectedItems());
		createJobRequest.setTargetSelection("CONTINUOUS");
		
		JobExecutionsRolloutConfig jobExecutionsRolloutConfig = new JobExecutionsRolloutConfig();
		jobExecutionsRolloutConfig.setMaximumPerMinute(Integer.parseInt(maxJobRollout.getText()));
		createJobRequest.setJobExecutionsRolloutConfig(jobExecutionsRolloutConfig);
		TimeoutConfig timeoutConfig = new TimeoutConfig();
		timeoutConfig.setInProgressTimeoutInMinutes(Long.parseLong(jobTimeout.getText()));
		createJobRequest.setTimeoutConfig(timeoutConfig);
//		createJobRequest.get
		
		AwsBuilderUtils.getInstance().createJob(createJobRequest);
	}

}
class S3ObjectCell extends ListCell<S3ObjectSummary> {

    @Override
    protected void updateItem(S3ObjectSummary item, boolean empty) {
        super.updateItem(item, empty);

            setText(item.getBucketName());
            setContentDisplay(ContentDisplay.TEXT_ONLY);
        }
}
class S3ObjectCellFactory implements Callback<ListView<S3ObjectSummary>, ListCell<S3ObjectSummary>> {

    @Override
    public ListCell<S3ObjectSummary> call(ListView<S3ObjectSummary> param) {
        return new S3ObjectCell();
    }
}
